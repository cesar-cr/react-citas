{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","setCita","error","setError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.beaf1461.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nconst Formulario = ({ crearCita }) => {\n\n    // crear el state de citas\n    const [cita, setCita] = useState({\n        mascota: '',\n        propietario: '',\n        fecha: '',\n        hora: '',\n        sintomas:''\n    }); \n\n    const [error, setError] = useState(false);\n\n    // funcion que se ejecuta cada que el usuario escriba en el input\n    const actualizarState = e => {\n        // console.log(e.target.name); -> para obtener en que campo esta escribiendo\n        // console.log(e.target.value); -> para saber que es lo que se esta escribiendo\n        setCita({\n            ...cita, [e.target.name] : e.target.value\n        });\n    }\n\n    const { mascota, propietario, fecha, hora, sintomas } = cita;\n\n    // cuando el usuario envia el form\n    const submitCita = (e) => {\n        e.preventDefault();\n        // validar\n        if (mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === ''\n                || hora.trim() === '' || sintomas.trim() === '') {\n            setError(true);\n            return;\n        }\n        // quitar la alerta de campos requeridos\n        setError(false);\n        // asignar un ID\n        cita.id = uuidv4();\n        // crear la cita\n        crearCita(cita);\n        // reiniciar el form\n        setCita({\n            mascota: '',\n            propietario: '',\n            fecha: '',\n            hora: '',\n            sintomas:''\n        });\n    }\n     \n\n    return (\n        <>\n            <h2>Crear cita</h2>\n\n            {\n                error && <p className=\"alerta-error\">Todos los campos son obligatorios</p>\n            }\n\n            <form\n                onSubmit={ submitCita }\n            >\n                <label>Nombre mascota</label>\n                <input\n                    type=\"text\"\n                    name=\"mascota\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre mascota\"\n                    onChange={actualizarState}\n                    value={ mascota }\n                />\n                \n                <label>Nombre dueño</label>\n                <input\n                    type=\"text\"\n                    name=\"propietario\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre dueño de mascota\"\n                    onChange={actualizarState}\n                    value={ propietario }\n                />\n                \n                <label>Fecha</label>\n                <input\n                    type=\"date\"\n                    name=\"fecha\"\n                    className=\"u-full-width\"\n                    onChange={actualizarState}\n                    value={ fecha }\n                />\n\n                <label>Hora</label>\n                <input\n                    type=\"time\"\n                    name=\"hora\"\n                    className=\"u-full-width\"\n                    onChange={actualizarState}\n                    value={ hora }\n                />\n\n                <label>Sintomas</label>\n                <textarea\n                    className=\"u-full-width\"\n                    name=\"sintomas\"\n                    onChange={actualizarState}\n                    value={ sintomas }\n                ></textarea>\n                \n                <button\n                    type=\"submit\"\n                    className=\"u-full-width button-primary\"\n                >\n                    Agregar cita\n                </button>\n                \n                \n            </form>\n        </>\n    )\n}\n\nFormulario.propTypes = {\n    crearCita : PropTypes.func.isRequired\n}\n\n\nexport default Formulario;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Cita = ({ cita, eliminarCita }) => {\n\n    return (\n        <div className=\"cita\">\n            <p>Mascota: <span>{cita.mascota}</span></p>\n            <p>Dueño: <span>{cita.propietario}</span></p>\n            <p>Fecha: <span>{cita.fecha}</span></p>\n            <p>Hora: <span>{cita.hora}</span></p>\n            <p>Sintomas: <span>{cita.sintomas}</span></p>\n            \n            <button\n                className=\"button eliminar u-full-width\"\n                onClick={ () => eliminarCita(cita.id) }\n            > Eliminar &times; </button>\n        </div>\n    )\n}\n\nCita.propTypes = {\n    cita: PropTypes.object.isRequired,\n    eliminarCita: PropTypes.func.isRequired\n}\n\nexport default Cita;","import React, { useState, useEffect } from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\nfunction App() {\n\n  // citas en local storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if (!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  // arreglo de citas\n  const [citas, setCitas] = useState(citasIniciales);\n\n  // useEffect para realizar ciertas operaciones cuando el state cambia\n  useEffect(() => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n    if (citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas));\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas] );\n\n  // funcion que tome las citas actuales y agregue la nueva\n  const crearCita = cita => { setCitas([...citas, cita]) }\n  \n  // funcion que elimina cita por ID\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    setCitas(nuevasCitas);\n  }\n\n  // mensaje condicional\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas';\n\n  return (\n    <>\n      <h1>Administrador de pacientes</h1>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario\n              crearCita={crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map(cita => (\n              <Cita\n                key={cita.id}\n                cita={cita}\n                eliminarCita={ eliminarCita }\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}